// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
//   sqlc-gen-ts-d1 v0.0.0-a@254c24db5bcb2e1e16559e7f8498d7fa673ada31

import { D1Database, D1Result } from "@cloudflare/workers-types/2022-11-30"

const getAllProblemsQuery = `-- name: getAllProblems :many
select id, title, content, difficulty, tests, playgroundurl from Problem`;

export type getAllProblemsRow = {
  id: string;
  title: string;
  content: string;
  difficulty: string;
  tests: string;
  playgroundurl: string;
};

export async function getAllProblems(
  d1: D1Database
): Promise<D1Result<getAllProblemsRow>> {
  return await d1
    .prepare(getAllProblemsQuery)
    .all<getAllProblemsRow>();
}

const getProblemQuery = `-- name: getProblem :one
select id, title, content, difficulty, tests, playgroundurl from Problem where id = ?`;

export type getProblemParams = {
  id: string;
};

export type getProblemRow = {
  id: string;
  title: string;
  content: string;
  difficulty: string;
  tests: string;
  playgroundurl: string;
};

export async function getProblem(
  d1: D1Database,
  args: getProblemParams
): Promise<getProblemRow | null> {
  return await d1
    .prepare(getProblemQuery)
    .bind(args.id)
    .first<getProblemRow | null>();
}

const createSubmissionQuery = `-- name: CreateSubmission :one
insert into Submission
  (id, problemid, userid, code, codelength, status)
values
  (?, ?, ?, ?, ?, ?)
returning id, problemid, userid, code, codelength, status, createdat`;

export type CreateSubmissionParams = {
  id: string;
  problemid: string;
  userid: string;
  code: string;
  codelength: number | string;
  status: string;
};

export type CreateSubmissionRow = {
  id: string;
  problemid: string;
  userid: string;
  code: string;
  codelength: number | string;
  status: string;
  createdat: string | null;
};

export async function createSubmission(
  d1: D1Database,
  args: CreateSubmissionParams
): Promise<CreateSubmissionRow | null> {
  return await d1
    .prepare(createSubmissionQuery)
    .bind(args.id, args.problemid, args.userid, args.code, args.codelength, args.status)
    .first<CreateSubmissionRow | null>();
}

const findSubmissionQuery = `-- name: findSubmission :one
select id, problemid, userid, code, codelength, status, createdat from Submission where id = ?`;

export type findSubmissionParams = {
  id: string;
};

export type findSubmissionRow = {
  id: string;
  problemid: string;
  userid: string;
  code: string;
  codelength: number | string;
  status: string;
  createdat: string | null;
};

export async function findSubmission(
  d1: D1Database,
  args: findSubmissionParams
): Promise<findSubmissionRow | null> {
  return await d1
    .prepare(findSubmissionQuery)
    .bind(args.id)
    .first<findSubmissionRow | null>();
}

const findUserQuery = `-- name: findUser :one
select userid, screenname from User where userId = ?`;

export type findUserParams = {
  userid: string;
};

export type findUserRow = {
  userid: string;
  screenname: string;
};

export async function findUser(
  d1: D1Database,
  args: findUserParams
): Promise<findUserRow | null> {
  return await d1
    .prepare(findUserQuery)
    .bind(args.userid)
    .first<findUserRow | null>();
}

const findProblemQuery = `-- name: findProblem :one
select id, title, content, difficulty, tests, playgroundurl from Problem where id = ?`;

export type findProblemParams = {
  id: string;
};

export type findProblemRow = {
  id: string;
  title: string;
  content: string;
  difficulty: string;
  tests: string;
  playgroundurl: string;
};

export async function findProblem(
  d1: D1Database,
  args: findProblemParams
): Promise<findProblemRow | null> {
  return await d1
    .prepare(findProblemQuery)
    .bind(args.id)
    .first<findProblemRow | null>();
}

